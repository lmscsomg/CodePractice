# 背包问题
***
## 01背包问题
如果不放入第i件物品，“前i-1件物品放入容量为W的背包中”，价值为F[i-1,W];
如果放入第i件物品，“前i-1件物品放入容量为W-Ci的背包中”加上放入第i件，价值为F[i,W-wi]+vi;
**F[i,W]=max{F[i-1,W],F[i-1,W-wi]+vi}**

	for(int i=0;i<n;i++)
		for(int j=W;j>=w[i];j--)
			dp[j]=max(dp[j],dp[j-w[i]]+v[i]);
**一维数组从右往左更新**，dp[W]保留的是上一层的F[i-1,W]，dp[j-w[i]]保留的上一层的F[i-1,W-w[i]](从右往左更新，左边的还没有更新到）。

##完全背包问题
**F[i,W]=max{F[i-1,W-k*w[i]| 0<=k*w[i]<=W}**
dp[i][j]的计算中，选择k个物品的情况，和dp[i][j-w[i]]选择k-1个物品情况相同。

	for(int i=0;i<n;i++)
		for(int j=w[i];j<W;j++)
			dp[j]=max(dp[j],dp[j-w[i]]+v[i]);
**一维数组从左往右更新××，选一件OK后，选两件利用选一件的结果，以此递推，dp[j]保留的是上一层中的F[i-1,j]的情况。
	